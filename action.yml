name: "Build & test frontend reusable action"
description: "Build & test frontend reusable action"
author: "Gutenberg Technology"

inputs:
  artifact-name:
    description: "Artifact name"
    required: false
    default: ""
  artifact-path:
    description: "Artifact path"
    required: false
    default: "dist"
  cache-package-manager:
    description: "Package manager for caching (npm, yarn, etc)"
    required: false
    default: ""
  pre-install-cmd:
    description: "Command for pre-install"
    required: false
    default: ""
  install-cmd:
    description: "Command for installing dependencies"
    required: true
  build-cmd:
    description: "Command for building"
    required: true
  post-build-cmd:
    description: "Command for post-build"
    required: false
    default: ""
  lint-cmd:
    description: "Command for linting"
    required: false
    default: ""
  test-cmd:
    description: "Command for running testing"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: "Read .nvmrc"
      id: read-nvmrc
      run: echo "node-version=$(cat .nvmrc)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Set Node.js version
      uses: actions/setup-node@v4
      with:
        node-version: ${{ steps.read-nvmrc.outputs.node-version }}
        cache: ${{ inputs.cache-package-manager }}

    - name: "Pre Install cmd"
      run: ${{ inputs.pre-install-cmd }}
      shell: bash

    - name: "Install :arrow_down:"
      run: ${{ inputs.install-cmd }}
      shell: bash

    - name: "Lint :broom:"
      if: inputs.lint-cmd != ''
      run: ${{ inputs.lint-cmd }}
      shell: bash

    - name: "Build :hammer:"
      run: ${{ inputs.build-cmd }}
      shell: bash

    - name: "Post build cmd"
      run: ${{ inputs.post-build-cmd }}
      shell: bash

    - name: "Test :test_tube:"
      if: inputs.test-cmd != ''
      run: ${{ inputs.test-cmd }}
      shell: bash

    - name: "Upload Archive"
      uses: "actions/upload-artifact@v4"
      if: inputs.artifact-name != ''
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.artifact-path }}
        if-no-files-found: error
